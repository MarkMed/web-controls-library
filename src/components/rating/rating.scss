@import "../common/_base";

@mixin widthHeightsize($valueX, $valueY) {
  height: $valueY;
  width: $valueX;
}
@mixin flex($direct, $justCont, $aligItem, $wrap) {
  display: flex;
  flex-direction: $direct;
  justify-content: $justCont;
  align-items: $aligItem;
  flex-wrap: $wrap;
}
@mixin starStyle($number) {
  &[data-score="#{$number}"] {
    svg {
      filter: drop-shadow(0 0 2px var(--active-stars-shadow-color));
      polygon {
        fill: var(--active-stars-color);
      }
      &:nth-child(#{$number}) ~ svg {
        filter: none;
        polygon {
          fill: var(--inactive-stars-color);
        }
      }
    }
    &:hover {
      svg ~ svg {
        polygon {
          fill: var(--active-stars-color);
        }
      }
      svg:hover {
        & ~ svg {
          polygon {
            fill: var(--inactive-stars-hover-color);
          }
        }
      }
    }
  }
}
gx-rating {
  @include visibility(block);
  /**
  * @prop --active-stars-color:
   * Set the color that will have the stars.
  */
  --active-stars-color: #e4ac13;

  /**
  * @prop --active-stars-shadow-color:
   * Set the shadow color of actives stars.
  */
  --active-stars-shadow-color: var(--active-stars-color);

  /**
  * @prop --inactive-stars-color:
   * Set the color that will have the stars when are not active _(No rated)_.
  */
  --inactive-stars-color: rgba(80, 80, 80, 0.6);

  /**
  * @prop --inactive-stars-hover-color:
   * Set the color of inactive stars when the user is rating.
  */
  --inactive-stars-hover-color: rgba(80, 80, 80, 0.4);

  /**
  * @prop --star-width:
   * Set the width of each star.
  */
  --star-width: 2em;

  /**
  * @prop --star-heigth:
   * Set the heigth of each star.
  */
  --star-heigth: auto;

  /**
   * @prop --star-separation
   * This is for set the space between each star
  */
  --star-separation: 2px;

  %ratingHover {
    &:hover {
      svg:nth-child(n) {
        polygon {
          fill: var(--active-stars-color);
        }
        &:hover ~ svg {
          polygon {
            fill: var(--inactive-stars-hover-color);
          }
        }
      }
    }
    svg {
      @include widthHeightsize(var(--star-width), var(--star-heigth));
      padding: 0px var(--star-separation);
      cursor: pointer;
      polygon {
        fill: var(--inactive-stars-color);
        transition: 0.4s ease;
      }
    }
  }
  input {
    display: none;
  }
  div.rating {
    @include widthHeightsize(max-content, max-content);
    @include flex(row, space-between, center, wrap);

    @for $i from 1 through 5 {
      @include starStyle($i);
    }

    @extend %ratingHover;
  }
  div.score {
    @include widthHeightsize(max-content, max-content);
    @include flex(row, space-between, center, wrap);
    svg {
      @include widthHeightsize(2em, auto);
      padding: 0px var(--star-separation);
      polygon {
        fill: var(--inactive-stars-color);
        transition: 0.3s ease;
      }
      &.active {
        filter: drop-shadow(0 0 2px var(--active-stars-shadow-color));
        polygon {
          fill: var(--active-stars-color);
        }
      }
    }
  }
}
