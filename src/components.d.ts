/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import "@stencil/core";

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {

  }

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

declare global {
  namespace StencilComponents {
    interface GxButton {
      /**
       * A CSS class to set as the inner `input` element class.
       */
      cssClass: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event). If a disabled image has been specified, it will be shown, hiding the base image (if specified).
       */
      disabled: boolean;
      /**
       * This attribute lets you specify the relative location of the image to the text.  | Value    | Details                                                 | | -------- | ------------------------------------------------------- | | `above`  | The image is located above the text.                    | | `before` | The image is located before the text, in the same line. | | `after`  | The image is located after the text, in the same line.  | | `below`  | The image is located below the text.                    | | `behind` | The image is located behind the text.                   |
       */
      imagePosition: "above" | "before" | "after" | "below" | "behind";
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode: "collapse" | "keep-space";
      /**
       * This attribute lets you specify the size of the button.  | Value    | Details                                                 | | -------- | ------------------------------------------------------- | | `large`  | Large sized button.                                     | | `normal` | Standard sized button.                                  | | `small`  | Small sized button.                                     |
       */
      size: "large" | "normal" | "small";
    }
  }

  interface HTMLGxButtonElement
    extends StencilComponents.GxButton,
      HTMLStencilElement {}

  var HTMLGxButtonElement: {
    prototype: HTMLGxButtonElement;
    new (): HTMLGxButtonElement;
  };
  interface HTMLElementTagNameMap {
    "gx-button": HTMLGxButtonElement;
  }
  interface ElementTagNameMap {
    "gx-button": HTMLGxButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-button": JSXElements.GxButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface GxButtonAttributes extends HTMLAttributes {
      /**
       * A CSS class to set as the inner `input` element class.
       */
      cssClass?: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event). If a disabled image has been specified, it will be shown, hiding the base image (if specified).
       */
      disabled?: boolean;
      /**
       * This attribute lets you specify the relative location of the image to the text.  | Value    | Details                                                 | | -------- | ------------------------------------------------------- | | `above`  | The image is located above the text.                    | | `before` | The image is located before the text, in the same line. | | `after`  | The image is located after the text, in the same line.  | | `below`  | The image is located below the text.                    | | `behind` | The image is located behind the text.                   |
       */
      imagePosition?: "above" | "before" | "after" | "below" | "behind";
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode?: "collapse" | "keep-space";
      /**
       * Emitted when the element is clicked.
       */
      onOnClick?: (event: CustomEvent) => void;
      /**
       * This attribute lets you specify the size of the button.  | Value    | Details                                                 | | -------- | ------------------------------------------------------- | | `large`  | Large sized button.                                     | | `normal` | Standard sized button.                                  | | `small`  | Small sized button.                                     |
       */
      size?: "large" | "normal" | "small";
    }
  }
}

declare global {
  namespace StencilComponents {
    interface GxCard {
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode: "collapse" | "keep-space";
    }
  }

  interface HTMLGxCardElement
    extends StencilComponents.GxCard,
      HTMLStencilElement {}

  var HTMLGxCardElement: {
    prototype: HTMLGxCardElement;
    new (): HTMLGxCardElement;
  };
  interface HTMLElementTagNameMap {
    "gx-card": HTMLGxCardElement;
  }
  interface ElementTagNameMap {
    "gx-card": HTMLGxCardElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-card": JSXElements.GxCardAttributes;
    }
  }
  namespace JSXElements {
    export interface GxCardAttributes extends HTMLAttributes {
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode?: "collapse" | "keep-space";
    }
  }
}

declare global {
  namespace StencilComponents {
    interface GxCheckbox {
      /**
       * Specifies the label of the checkbox.
       */
      caption: string;
      /**
       * Indicates that the control is selected by default.
       */
      checked: boolean;
      /**
       * A CSS class to set as the inner `input` element class.
       */
      cssClass: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      disabled: boolean;
      /**
       * Returns the id of the inner `input` element (if set).
       */
      getNativeInputId: () => string;
      /**
       * The identifier of the control. Must be unique.
       */
      id: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode: "collapse" | "keep-space";
    }
  }

  interface HTMLGxCheckboxElement
    extends StencilComponents.GxCheckbox,
      HTMLStencilElement {}

  var HTMLGxCheckboxElement: {
    prototype: HTMLGxCheckboxElement;
    new (): HTMLGxCheckboxElement;
  };
  interface HTMLElementTagNameMap {
    "gx-checkbox": HTMLGxCheckboxElement;
  }
  interface ElementTagNameMap {
    "gx-checkbox": HTMLGxCheckboxElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-checkbox": JSXElements.GxCheckboxAttributes;
    }
  }
  namespace JSXElements {
    export interface GxCheckboxAttributes extends HTMLAttributes {
      /**
       * Specifies the label of the checkbox.
       */
      caption?: string;
      /**
       * Indicates that the control is selected by default.
       */
      checked?: boolean;
      /**
       * A CSS class to set as the inner `input` element class.
       */
      cssClass?: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      disabled?: boolean;
      /**
       * The identifier of the control. Must be unique.
       */
      id?: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode?: "collapse" | "keep-space";
      /**
       * The `change` event is emitted when a change to the element's value is committed by the user.
       */
      onOnChange?: (event: CustomEvent) => void;
    }
  }
}

declare global {
  namespace StencilComponents {
    interface GxEdit {
      area: string;
      /**
       * Specifies the auto-capitalization behavior. Same as [autocapitalize](https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html#//apple_ref/doc/uid/TP40008058-autocapitalize) attribute for `input` elements. Only supported by Safari and Chrome.
       */
      autocapitalize: "none" | "sentences" | "words" | "characters";
      /**
       * This attribute indicates whether the value of the control can be automatically completed by the browser. Same as [autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete) attribute for `input` elements.
       */
      autocomplete: "on" | "off";
      /**
       * Used to control whether autocorrection should be enabled when the user is entering/editing the text value. Sames as [autocorrect](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocorrect) attribute for `input` elements.
       */
      autocorrect: string;
      /**
       * A CSS class to set as the inner `input` element class.
       */
      cssClass: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      disabled: boolean;
      /**
       * Returns the id of the inner `input` element (if set).
       */
      getNativeInputId: () => string;
      /**
       * The identifier of the control. Must be unique.
       */
      id: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode: "collapse" | "keep-space";
      /**
       * Controls if the element accepts multiline text.
       */
      multiline: boolean;
      /**
       * A hint to the user of what can be entered in the control. Same as [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder) attribute for `input` elements.
       */
      placeholder: string;
      /**
       * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
       */
      readonly: boolean;
      /**
       * If true, a trigger button is shown next to the edit field. The button can be customized using `trigger-text` and `trigger-class` attributes, or adding a child element with `slot="trigger-content"` attribute to specify the content inside the trigger button.
       */
      showTrigger: boolean;
      /**
       * A CSS class to set as the trigger button class.
       */
      triggerClass: string;
      /**
       * The text of the trigger button. If a text is specified and an image is specified (through an element with `slot="trigger-content"`), the content is ignored and the text is used instead.
       */
      triggerText: string;
      /**
       * The type of control to render. A subset of the types supported by the `input` element is supported:  * `"date"` * `"datetime-local"` * `"email"` * `"file"` * `"number"` * `"password"` * `"search"` * `"tel"` * `"text"` * `"url"`
       */
      type:
        | "date"
        | "datetime-local"
        | "email"
        | "file"
        | "number"
        | "password"
        | "search"
        | "tel"
        | "text"
        | "url";
      /**
       * The initial value of the control.
       */
      value: string;
    }
  }

  interface HTMLGxEditElement
    extends StencilComponents.GxEdit,
      HTMLStencilElement {}

  var HTMLGxEditElement: {
    prototype: HTMLGxEditElement;
    new (): HTMLGxEditElement;
  };
  interface HTMLElementTagNameMap {
    "gx-edit": HTMLGxEditElement;
  }
  interface ElementTagNameMap {
    "gx-edit": HTMLGxEditElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-edit": JSXElements.GxEditAttributes;
    }
  }
  namespace JSXElements {
    export interface GxEditAttributes extends HTMLAttributes {
      area?: string;
      /**
       * Specifies the auto-capitalization behavior. Same as [autocapitalize](https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html#//apple_ref/doc/uid/TP40008058-autocapitalize) attribute for `input` elements. Only supported by Safari and Chrome.
       */
      autocapitalize?: "none" | "sentences" | "words" | "characters";
      /**
       * This attribute indicates whether the value of the control can be automatically completed by the browser. Same as [autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete) attribute for `input` elements.
       */
      autocomplete?: "on" | "off";
      /**
       * Used to control whether autocorrection should be enabled when the user is entering/editing the text value. Sames as [autocorrect](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocorrect) attribute for `input` elements.
       */
      autocorrect?: string;
      /**
       * A CSS class to set as the inner `input` element class.
       */
      cssClass?: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      disabled?: boolean;
      /**
       * The identifier of the control. Must be unique.
       */
      id?: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode?: "collapse" | "keep-space";
      /**
       * Controls if the element accepts multiline text.
       */
      multiline?: boolean;
      /**
       * The `gxTriggerClick` event is fired when the trigger button is clicked.
       */
      onGxTriggerClick?: (event: CustomEvent) => void;
      /**
       * The `change` event is emitted when a change to the element's value is committed by the user. Unlike the `input` event, the `change` event is not necessarily fired for each change to an element's value but when the control loses focus.
       */
      onOnChange?: (event: CustomEvent) => void;
      /**
       * The `input` event is fired synchronously when the value is changed.
       */
      onOnInput?: (event: CustomEvent) => void;
      /**
       * A hint to the user of what can be entered in the control. Same as [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder) attribute for `input` elements.
       */
      placeholder?: string;
      /**
       * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
       */
      readonly?: boolean;
      /**
       * If true, a trigger button is shown next to the edit field. The button can be customized using `trigger-text` and `trigger-class` attributes, or adding a child element with `slot="trigger-content"` attribute to specify the content inside the trigger button.
       */
      showTrigger?: boolean;
      /**
       * A CSS class to set as the trigger button class.
       */
      triggerClass?: string;
      /**
       * The text of the trigger button. If a text is specified and an image is specified (through an element with `slot="trigger-content"`), the content is ignored and the text is used instead.
       */
      triggerText?: string;
      /**
       * The type of control to render. A subset of the types supported by the `input` element is supported:  * `"date"` * `"datetime-local"` * `"email"` * `"file"` * `"number"` * `"password"` * `"search"` * `"tel"` * `"text"` * `"url"`
       */
      type?:
        | "date"
        | "datetime-local"
        | "email"
        | "file"
        | "number"
        | "password"
        | "search"
        | "tel"
        | "text"
        | "url";
      /**
       * The initial value of the control.
       */
      value?: string;
    }
  }
}

declare global {
  namespace StencilComponents {
    interface GxFormField {
      /**
       * The text to set as the label of the field.
       */
      labelCaption: string;
      /**
       * A CSS class to set as the inner `label` element class.
       */
      labelClass: string;
      /**
       * The position where the label will be located, relative to the edit control. The supported values are:  * `"top"`: The label is located above the edit control. * `"right"`: The label is located at the right side of the edit control. * `"bottom"`: The label is located below the edit control. * `"left"`: The label is located at the left side of the edit control. * `"float"`: The label is shown as a placeholder when the edit control's value is empty. When the value is not empty, the label floats and locates above the edit control. * `"none"`: The label is rendered, but hidden.
       */
      labelPosition: "none" | "top" | "right" | "bottom" | "left" | "float";
    }
  }

  interface HTMLGxFormFieldElement
    extends StencilComponents.GxFormField,
      HTMLStencilElement {}

  var HTMLGxFormFieldElement: {
    prototype: HTMLGxFormFieldElement;
    new (): HTMLGxFormFieldElement;
  };
  interface HTMLElementTagNameMap {
    "gx-form-field": HTMLGxFormFieldElement;
  }
  interface ElementTagNameMap {
    "gx-form-field": HTMLGxFormFieldElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-form-field": JSXElements.GxFormFieldAttributes;
    }
  }
  namespace JSXElements {
    export interface GxFormFieldAttributes extends HTMLAttributes {
      /**
       * The text to set as the label of the field.
       */
      labelCaption?: string;
      /**
       * A CSS class to set as the inner `label` element class.
       */
      labelClass?: string;
      /**
       * The position where the label will be located, relative to the edit control. The supported values are:  * `"top"`: The label is located above the edit control. * `"right"`: The label is located at the right side of the edit control. * `"bottom"`: The label is located below the edit control. * `"left"`: The label is located at the left side of the edit control. * `"float"`: The label is shown as a placeholder when the edit control's value is empty. When the value is not empty, the label floats and locates above the edit control. * `"none"`: The label is rendered, but hidden.
       */
      labelPosition?: "none" | "top" | "right" | "bottom" | "left" | "float";
    }
  }
}

declare global {
  namespace StencilComponents {
    interface GxImage {
      /**
       * This attribute lets you specify the alternative text.
       */
      alt: string;
      /**
       * A CSS class to set as the inner element class.
       */
      cssClass: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      disabled: boolean;
      /**
       * This attribute lets you specify the height.
       */
      height: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode: "collapse" | "keep-space";
      /**
       * This attribute lets you specify the low resolution image SRC.
       */
      lowResolutionSrc: string;
      /**
       * This attribute lets you specify the SRC.
       */
      src: string;
      /**
       * This attribute lets you specify the width.
       */
      width: string;
    }
  }

  interface HTMLGxImageElement
    extends StencilComponents.GxImage,
      HTMLStencilElement {}

  var HTMLGxImageElement: {
    prototype: HTMLGxImageElement;
    new (): HTMLGxImageElement;
  };
  interface HTMLElementTagNameMap {
    "gx-image": HTMLGxImageElement;
  }
  interface ElementTagNameMap {
    "gx-image": HTMLGxImageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-image": JSXElements.GxImageAttributes;
    }
  }
  namespace JSXElements {
    export interface GxImageAttributes extends HTMLAttributes {
      /**
       * This attribute lets you specify the alternative text.
       */
      alt?: string;
      /**
       * A CSS class to set as the inner element class.
       */
      cssClass?: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      disabled?: boolean;
      /**
       * This attribute lets you specify the height.
       */
      height?: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode?: "collapse" | "keep-space";
      /**
       * This attribute lets you specify the low resolution image SRC.
       */
      lowResolutionSrc?: string;
      /**
       * Emitted when the element is clicked.
       */
      onOnClick?: (event: CustomEvent) => void;
      /**
       * This attribute lets you specify the SRC.
       */
      src?: string;
      /**
       * This attribute lets you specify the width.
       */
      width?: string;
    }
  }
}

declare global {
  namespace StencilComponents {
    interface GxLayoutEditorPlaceholder {}
  }

  interface HTMLGxLayoutEditorPlaceholderElement
    extends StencilComponents.GxLayoutEditorPlaceholder,
      HTMLStencilElement {}

  var HTMLGxLayoutEditorPlaceholderElement: {
    prototype: HTMLGxLayoutEditorPlaceholderElement;
    new (): HTMLGxLayoutEditorPlaceholderElement;
  };
  interface HTMLElementTagNameMap {
    "gx-layout-editor-placeholder": HTMLGxLayoutEditorPlaceholderElement;
  }
  interface ElementTagNameMap {
    "gx-layout-editor-placeholder": HTMLGxLayoutEditorPlaceholderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-layout-editor-placeholder": JSXElements.GxLayoutEditorPlaceholderAttributes;
    }
  }
  namespace JSXElements {
    export interface GxLayoutEditorPlaceholderAttributes
      extends HTMLAttributes {}
  }
}

declare global {
  namespace StencilComponents {
    interface GxLayoutEditor {
      /**
       * The abstract form model object
       */
      model: any;
      /**
       * Array with the identifiers of the selected controls. If empty the whole layout-editor is marked as selected.
       */
      selectedCells: string[];
    }
  }

  interface HTMLGxLayoutEditorElement
    extends StencilComponents.GxLayoutEditor,
      HTMLStencilElement {}

  var HTMLGxLayoutEditorElement: {
    prototype: HTMLGxLayoutEditorElement;
    new (): HTMLGxLayoutEditorElement;
  };
  interface HTMLElementTagNameMap {
    "gx-layout-editor": HTMLGxLayoutEditorElement;
  }
  interface ElementTagNameMap {
    "gx-layout-editor": HTMLGxLayoutEditorElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-layout-editor": JSXElements.GxLayoutEditorAttributes;
    }
  }
  namespace JSXElements {
    export interface GxLayoutEditorAttributes extends HTMLAttributes {
      /**
       * The abstract form model object
       */
      model?: any;
      /**
       * Fired when a control (that wasn't already inside the layout editor) has been dropped on a valid drop target (for example, a control from a toolbox or an object from the knowledge base navigator)  ##### Dragging a control  If a control is being dragged, the dataTransfer property of the event must have the following format:  `"GX_DASHBOARD_ADDELEMENT,[GeneXus type of control]"`  where:  * `GX_DASHBOARD_ADDELEMENT` is the type of action * `[GeneXus type of control]` is the type of control that's been added. This value can have any value and will be passed as part of the information sent as part of the event.  ##### Dragging a KB object  If a KB object is being dragged, the dataTransfer property of the event must contain the name of the KB object.  ##### Dropped control information  An object containing information of the add operation is sent in the `detail` property of the event object.  If a KB object was dropped, the following properties are set:  | Property          | Details                                                                                                                                     | | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | | `kbObjectName`    | Name of the GeneXus object                                                                                                               |  If control was dropped, the following properties are set.  | Property          | Details                                                                                                                                     | | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | | `elementType`     | The type of the control that's been added and was received as the `[GeneXus type of control]` in the dataTransfer of the drop operation     |  Depending on where the control was dropped, additional information will be provided and different properties will be set. There are four possible cases:  1. Dropped on an empty container or in the last row of a container 2. Dropped on a new row of a non empty container 3. Dropped on an existing empty cell 4. Dropped on an existing row   ###### 1. Dropped on an empty container or on a new row that will be the last row of a container  | Property          | Details                                                                                                                                     | | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | | `containerId`     | Identifier of the container where the control was dropped                                                                                   |  ###### 2. Dropped on a new row of a non empty container  | Property          | Details                                                                                                                                     | | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | | `beforeRowId`     | Identifier of the row next to the row where the control was dropped. An empty string if dropped in the last row or on an empty container.   |  ###### 3. Dropped on an existing empty cell  | Property      | Details                                                                                                          | | ------------- | ---------------------------------------------------------------------------------------------------------------- | | `targetCellId`| Identifier of the cell where the control was dropped |    ###### 4. Dropped on an existing row  | Property          | Details                                                                                                                                     | | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | | `beforeControlId` | Identifier of the cell that, after the drop operation, ends located after the dropped control. An empty string if dropped as the last cell. | | `targetRowId`     | Identifier of the row where the control was dropped                                                                                         |
       */
      onControlAdded?: (event: CustomEvent) => void;
      /**
       * Fired when a control has been removed from the layout  An object containing information of the add operation is sent in the `detail` property of the event object  | Property          | Details                                                                                                                                     | | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | | `controlId`       | Identifier of the cell that was removed |
       */
      onControlRemoved?: (event: CustomEvent) => void;
      /**
       * Fired when the selection has been changed  An object containing information of the select operation is sent in the `detail` property of the event object  | Property      | Details                           | | ------------- | --------------------------------- | | `controlId`   | Identifier of the selected cell   |
       */
      onControlSelected?: (event: CustomEvent) => void;
      /**
       * Fired when a control is moved inside the layout editor to a new location  An object containing information of the move operation is sent in the `detail` property of the event object  Regardless where the control was dropped, the detail object will contain information about the source row and the id of the dropped control:  | Property      | Details                                                                                                          | | ------------- | ---------------------------------------------------------------------------------------------------------------- | | `controlId`   | Identifier of the source cell                                                                                    | | `sourceRowId` | Identifier of the source row                                                                                     |  Depending on where the control was dropped, additional information will be provided and different properties will be set. There are four possible cases:  1. Dropped on an empty container or on a new row that will be the last row of a container 2. Dropped on a new row of a non empty container 3. Dropped on an existing empty cell 4. Dropped on an existing row   ###### 1. Dropped on an empty container or on a new row that will be the last row of a container  | Property          | Details                                                                                                                                     | | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | | `containerId`     | Identifier of the container where the control was dropped                                                                                   |  ###### 2. Dropped on a new row of a non empty container  | Property          | Details                                                                                                                                     | | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | | `beforeRowId`     | Identifier of the row next to the row where the control was dropped. An empty string if dropped in the last row or on an empty container.   |  ###### 3. Dropped on an existing empty cell  | Property      | Details                                                                                                          | | ------------- | ---------------------------------------------------------------------------------------------------------------- | | `targetCellId`| Identifier of the cell where the control was dropped |    ###### 4. Dropped on an existing row  | Property          | Details                                                                                                                                     | | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | | `beforeControlId` | Identifier of the cell that, after the drop operation, ends located after the dropped control. An empty string if dropped as the last cell. | | `targetRowId`     | Identifier of the row where the control was dropped                                                                                         |
       */
      onMoveCompleted?: (event: CustomEvent) => void;
      /**
       * Array with the identifiers of the selected controls. If empty the whole layout-editor is marked as selected.
       */
      selectedCells?: string[];
    }
  }
}

declare global {
  namespace StencilComponents {
    interface GxMessage {
      /**
       * Text for the close button.
       */
      closeButtonText: string;
      /**
       * The time in miliseconds before the message is automatically dismissed. If no duration is specified, the message will not be automatically dismissed.
       */
      duration: number;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode: "collapse" | "keep-space";
      /**
       * Show a button for closing the meesage box
       */
      showCloseButton: boolean;
      /**
       * Type of the button: * `info`: Information message * `warning`: Warning Message * `error`: Error message
       */
      type: "info" | "warning" | "error";
    }
  }

  interface HTMLGxMessageElement
    extends StencilComponents.GxMessage,
      HTMLStencilElement {}

  var HTMLGxMessageElement: {
    prototype: HTMLGxMessageElement;
    new (): HTMLGxMessageElement;
  };
  interface HTMLElementTagNameMap {
    "gx-message": HTMLGxMessageElement;
  }
  interface ElementTagNameMap {
    "gx-message": HTMLGxMessageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-message": JSXElements.GxMessageAttributes;
    }
  }
  namespace JSXElements {
    export interface GxMessageAttributes extends HTMLAttributes {
      /**
       * Text for the close button.
       */
      closeButtonText?: string;
      /**
       * The time in miliseconds before the message is automatically dismissed. If no duration is specified, the message will not be automatically dismissed.
       */
      duration?: number;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode?: "collapse" | "keep-space";
      /**
       * Show a button for closing the meesage box
       */
      showCloseButton?: boolean;
      /**
       * Type of the button: * `info`: Information message * `warning`: Warning Message * `error`: Error message
       */
      type?: "info" | "warning" | "error";
    }
  }
}

declare global {
  namespace StencilComponents {
    interface GxNavbarLink {
      /**
       * Indicates if the navbar item is the active one (for example, when the item represents the current page)
       */
      active: boolean;
      /**
       * A CSS class to set as the inner element class.
       */
      cssClass: string;
      /**
       * This attribute lets you specify if the navbar item is disabled.
       */
      disabled: boolean;
      /**
       * This attribute lets you specify the URL of the navbar item.
       */
      href: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode: "collapse" | "keep-space";
    }
  }

  interface HTMLGxNavbarLinkElement
    extends StencilComponents.GxNavbarLink,
      HTMLStencilElement {}

  var HTMLGxNavbarLinkElement: {
    prototype: HTMLGxNavbarLinkElement;
    new (): HTMLGxNavbarLinkElement;
  };
  interface HTMLElementTagNameMap {
    "gx-navbar-link": HTMLGxNavbarLinkElement;
  }
  interface ElementTagNameMap {
    "gx-navbar-link": HTMLGxNavbarLinkElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-navbar-link": JSXElements.GxNavbarLinkAttributes;
    }
  }
  namespace JSXElements {
    export interface GxNavbarLinkAttributes extends HTMLAttributes {
      /**
       * Indicates if the navbar item is the active one (for example, when the item represents the current page)
       */
      active?: boolean;
      /**
       * A CSS class to set as the inner element class.
       */
      cssClass?: string;
      /**
       * This attribute lets you specify if the navbar item is disabled.
       */
      disabled?: boolean;
      /**
       * This attribute lets you specify the URL of the navbar item.
       */
      href?: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode?: "collapse" | "keep-space";
    }
  }
}

declare global {
  namespace StencilComponents {
    interface GxNavbar {
      /**
       * This attribute lets you specify an optional title for the navigation bar  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      caption: string;
      /**
       * A CSS class to set as the inner element class.
       */
      cssClass: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode: "collapse" | "keep-space";
      /**
       * This attribute lets you specify the label for the toggle button. Important for accessibility.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      toggleButtonLabel: string;
    }
  }

  interface HTMLGxNavbarElement
    extends StencilComponents.GxNavbar,
      HTMLStencilElement {}

  var HTMLGxNavbarElement: {
    prototype: HTMLGxNavbarElement;
    new (): HTMLGxNavbarElement;
  };
  interface HTMLElementTagNameMap {
    "gx-navbar": HTMLGxNavbarElement;
  }
  interface ElementTagNameMap {
    "gx-navbar": HTMLGxNavbarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-navbar": JSXElements.GxNavbarAttributes;
    }
  }
  namespace JSXElements {
    export interface GxNavbarAttributes extends HTMLAttributes {
      /**
       * This attribute lets you specify an optional title for the navigation bar  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      caption?: string;
      /**
       * A CSS class to set as the inner element class.
       */
      cssClass?: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode?: "collapse" | "keep-space";
      /**
       * This attribute lets you specify the label for the toggle button. Important for accessibility.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      toggleButtonLabel?: string;
    }
  }
}

declare global {
  namespace StencilComponents {
    interface GxPasswordEdit {
      /**
       * A CSS class to set as the inner `input` element class.
       */
      cssClass: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      disabled: boolean;
      /**
       * Returns the id of the inner `input` element (if set).
       */
      getNativeInputId: () => any;
      /**
       * The identifier of the control. Must be unique.
       */
      id: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode: "collapse" | "keep-space";
      /**
       * A hint to the user of what can be entered in the control. Same as [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder) attribute for `input` elements.
       */
      placeholder: string;
      /**
       * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
       */
      readonly: boolean;
      /**
       * Text of the reveal button to offer hiding the password.
       */
      revealButtonTextOff: string;
      /**
       * Text of the reveal button to offer revealing the password.
       */
      revealButtonTextOn: string;
      /**
       * If true, a reveal password button is shown next to the password input. Pressing the reveal button toggles the password mask, allowing the user to view the password text.
       */
      showRevealButton: boolean;
      /**
       * The initial value of the control.
       */
      value: string;
    }
  }

  interface HTMLGxPasswordEditElement
    extends StencilComponents.GxPasswordEdit,
      HTMLStencilElement {}

  var HTMLGxPasswordEditElement: {
    prototype: HTMLGxPasswordEditElement;
    new (): HTMLGxPasswordEditElement;
  };
  interface HTMLElementTagNameMap {
    "gx-password-edit": HTMLGxPasswordEditElement;
  }
  interface ElementTagNameMap {
    "gx-password-edit": HTMLGxPasswordEditElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-password-edit": JSXElements.GxPasswordEditAttributes;
    }
  }
  namespace JSXElements {
    export interface GxPasswordEditAttributes extends HTMLAttributes {
      /**
       * A CSS class to set as the inner `input` element class.
       */
      cssClass?: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      disabled?: boolean;
      /**
       * The identifier of the control. Must be unique.
       */
      id?: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode?: "collapse" | "keep-space";
      /**
       * The `change` event is emitted when a change to the element's value is committed by the user. Unlike the `input` event, the `change` event is not necessarily fired for each change to an element's value but when the control loses focus.
       */
      onOnChange?: (event: CustomEvent) => void;
      /**
       * The `input` event is fired synchronously when the value is changed.
       */
      onOnInput?: (event: CustomEvent) => void;
      /**
       * A hint to the user of what can be entered in the control. Same as [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder) attribute for `input` elements.
       */
      placeholder?: string;
      /**
       * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
       */
      readonly?: boolean;
      /**
       * Text of the reveal button to offer hiding the password.
       */
      revealButtonTextOff?: string;
      /**
       * Text of the reveal button to offer revealing the password.
       */
      revealButtonTextOn?: string;
      /**
       * If true, a reveal password button is shown next to the password input. Pressing the reveal button toggles the password mask, allowing the user to view the password text.
       */
      showRevealButton?: boolean;
      /**
       * The initial value of the control.
       */
      value?: string;
    }
  }
}

declare global {
  namespace StencilComponents {
    interface GxRadioGroup {
      /**
       * Specifies how the child `gx-radio-option` will be layed out. It supports two values:  * `horizontal` * `vertical` (default)
       */
      direction: "horizontal" | "vertical";
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      disabled: boolean;
      /**
       * The identifier of the control. Must be unique.
       */
      id: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode: "collapse" | "keep-space";
      /**
       * The name that will be set to all the inner inputs of type radio
       */
      name: string;
      /**
       * The initial value of the control. Setting the value automatically selects the corresponding radio option.
       */
      value: string;
    }
  }

  interface HTMLGxRadioGroupElement
    extends StencilComponents.GxRadioGroup,
      HTMLStencilElement {}

  var HTMLGxRadioGroupElement: {
    prototype: HTMLGxRadioGroupElement;
    new (): HTMLGxRadioGroupElement;
  };
  interface HTMLElementTagNameMap {
    "gx-radio-group": HTMLGxRadioGroupElement;
  }
  interface ElementTagNameMap {
    "gx-radio-group": HTMLGxRadioGroupElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-radio-group": JSXElements.GxRadioGroupAttributes;
    }
  }
  namespace JSXElements {
    export interface GxRadioGroupAttributes extends HTMLAttributes {
      /**
       * Specifies how the child `gx-radio-option` will be layed out. It supports two values:  * `horizontal` * `vertical` (default)
       */
      direction?: "horizontal" | "vertical";
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      disabled?: boolean;
      /**
       * The identifier of the control. Must be unique.
       */
      id?: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode?: "collapse" | "keep-space";
      /**
       * The name that will be set to all the inner inputs of type radio
       */
      name?: string;
      /**
       * The `change` event is emitted when a change to the element's value is committed by the user.
       */
      onOnChange?: (event: CustomEvent) => void;
      /**
       * The initial value of the control. Setting the value automatically selects the corresponding radio option.
       */
      value?: string;
    }
  }
}

declare global {
  namespace StencilComponents {
    interface GxRadioOption {
      /**
       * Specifies the label of the radio.
       */
      caption: string;
      /**
       * Indicates that the control is selected by default.
       */
      checked: boolean;
      /**
       * A CSS class to set as the inner `input` element class.
       */
      cssClass: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      disabled: boolean;
      /**
       * The identifier of the control. Must be unique.
       */
      id: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode: "collapse" | "keep-space";
      /**
       * The name of the inner input of type radio
       */
      name: string;
      /**
       * The initial value of the control.
       */
      value: string;
    }
  }

  interface HTMLGxRadioOptionElement
    extends StencilComponents.GxRadioOption,
      HTMLStencilElement {}

  var HTMLGxRadioOptionElement: {
    prototype: HTMLGxRadioOptionElement;
    new (): HTMLGxRadioOptionElement;
  };
  interface HTMLElementTagNameMap {
    "gx-radio-option": HTMLGxRadioOptionElement;
  }
  interface ElementTagNameMap {
    "gx-radio-option": HTMLGxRadioOptionElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-radio-option": JSXElements.GxRadioOptionAttributes;
    }
  }
  namespace JSXElements {
    export interface GxRadioOptionAttributes extends HTMLAttributes {
      /**
       * Specifies the label of the radio.
       */
      caption?: string;
      /**
       * Indicates that the control is selected by default.
       */
      checked?: boolean;
      /**
       * A CSS class to set as the inner `input` element class.
       */
      cssClass?: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      disabled?: boolean;
      /**
       * The identifier of the control. Must be unique.
       */
      id?: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode?: "collapse" | "keep-space";
      /**
       * The name of the inner input of type radio
       */
      name?: string;
      /**
       * Emitted when the radio loads.
       */
      onGxRadioDidLoad?: (event: CustomEvent) => void;
      /**
       * Emitted when the radio unloads.
       */
      onGxRadioDidUnload?: (event: CustomEvent) => void;
      /**
       * Emitted when the radio button is selected.
       */
      onGxSelect?: (event: CustomEvent) => void;
      /**
       * The `change` event is emitted when a change to the element's value is committed by the user.
       */
      onOnChange?: (event: CustomEvent) => void;
      /**
       * The initial value of the control.
       */
      value?: string;
    }
  }
}

declare global {
  namespace StencilComponents {
    interface GxSelectOption {
      /**
       * A CSS class to set as the inner `input` element class.
       */
      cssClass: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      disabled: boolean;
      /**
       * Indicates that the control is selected by default.
       */
      selected: boolean;
      /**
       * The initial value of the control.
       */
      value: string;
    }
  }

  interface HTMLGxSelectOptionElement
    extends StencilComponents.GxSelectOption,
      HTMLStencilElement {}

  var HTMLGxSelectOptionElement: {
    prototype: HTMLGxSelectOptionElement;
    new (): HTMLGxSelectOptionElement;
  };
  interface HTMLElementTagNameMap {
    "gx-select-option": HTMLGxSelectOptionElement;
  }
  interface ElementTagNameMap {
    "gx-select-option": HTMLGxSelectOptionElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-select-option": JSXElements.GxSelectOptionAttributes;
    }
  }
  namespace JSXElements {
    export interface GxSelectOptionAttributes extends HTMLAttributes {
      /**
       * A CSS class to set as the inner `input` element class.
       */
      cssClass?: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      disabled?: boolean;
      /**
       * Emitted when the option is disabled.
       */
      onGxDisable?: (event: CustomEvent) => void;
      /**
       * Emitted when the option is selected.
       */
      onGxSelect?: (event: CustomEvent) => void;
      /**
       * Emitted when the option loads.
       */
      onGxSelectDidLoad?: (event: CustomEvent) => void;
      /**
       * Emitted when the option unloads.
       */
      onGxSelectDidUnload?: (event: CustomEvent) => void;
      /**
       * The `change` event is emitted when a change to the element's value is committed by the user.
       */
      onOnChange?: (event: CustomEvent) => void;
      /**
       * Indicates that the control is selected by default.
       */
      selected?: boolean;
      /**
       * The initial value of the control.
       */
      value?: string;
    }
  }
}

declare global {
  namespace StencilComponents {
    interface GxSelect {
      /**
       * A CSS class to set as the inner `input` element class.
       */
      cssClass: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      disabled: boolean;
      /**
       * Returns the id of the inner `input` element (if set).
       */
      getNativeInputId: () => string;
      /**
       * The identifier of the control. Must be unique.
       */
      id: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode: "collapse" | "keep-space";
      /**
       * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
       */
      readonly: boolean;
      /**
       * The initial value of the control. Setting the value automatically selects the corresponding option.
       */
      value: string;
    }
  }

  interface HTMLGxSelectElement
    extends StencilComponents.GxSelect,
      HTMLStencilElement {}

  var HTMLGxSelectElement: {
    prototype: HTMLGxSelectElement;
    new (): HTMLGxSelectElement;
  };
  interface HTMLElementTagNameMap {
    "gx-select": HTMLGxSelectElement;
  }
  interface ElementTagNameMap {
    "gx-select": HTMLGxSelectElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-select": JSXElements.GxSelectAttributes;
    }
  }
  namespace JSXElements {
    export interface GxSelectAttributes extends HTMLAttributes {
      /**
       * A CSS class to set as the inner `input` element class.
       */
      cssClass?: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      disabled?: boolean;
      /**
       * The identifier of the control. Must be unique.
       */
      id?: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode?: "collapse" | "keep-space";
      /**
       * The `change` event is emitted when a change to the element's value is committed by the user.
       */
      onOnChange?: (event: CustomEvent) => void;
      /**
       * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
       */
      readonly?: boolean;
      /**
       * The initial value of the control. Setting the value automatically selects the corresponding option.
       */
      value?: string;
    }
  }
}

declare global {
  namespace StencilComponents {
    interface GxTableCell {
      /**
       * Defines the horizontal aligmnent of the content of the cell.
       */
      align: "left" | "right" | "center";
      /**
       * Like the `grid-area` CSS property, this attribute gives a name to the item, so it can be used from the [areas-template attributes](../table/readme.md#areas-template) of the gx-table element.
       */
      area: string;
      /**
       * This attribute defines if the control size will grow automatically, to adjust to its content size. If set to `false`, it won't grow automatically and it will show scrollbars if the content overflows.
       */
      autoGrow: boolean;
      /**
       * Defines the vertical aligmnent of the content of the cell.
       */
      valign: "top" | "bottom" | "medium";
    }
  }

  interface HTMLGxTableCellElement
    extends StencilComponents.GxTableCell,
      HTMLStencilElement {}

  var HTMLGxTableCellElement: {
    prototype: HTMLGxTableCellElement;
    new (): HTMLGxTableCellElement;
  };
  interface HTMLElementTagNameMap {
    "gx-table-cell": HTMLGxTableCellElement;
  }
  interface ElementTagNameMap {
    "gx-table-cell": HTMLGxTableCellElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-table-cell": JSXElements.GxTableCellAttributes;
    }
  }
  namespace JSXElements {
    export interface GxTableCellAttributes extends HTMLAttributes {
      /**
       * Defines the horizontal aligmnent of the content of the cell.
       */
      align?: "left" | "right" | "center";
      /**
       * Like the `grid-area` CSS property, this attribute gives a name to the item, so it can be used from the [areas-template attributes](../table/readme.md#areas-template) of the gx-table element.
       */
      area?: string;
      /**
       * This attribute defines if the control size will grow automatically, to adjust to its content size. If set to `false`, it won't grow automatically and it will show scrollbars if the content overflows.
       */
      autoGrow?: boolean;
      /**
       * Defines the vertical aligmnent of the content of the cell.
       */
      valign?: "top" | "bottom" | "medium";
    }
  }
}

declare global {
  namespace StencilComponents {
    interface GxTable {
      /**
       * Like the `grid-templates-areas` CSS property, this attribute defines a grid template by referencing the names of the areas which are specified with the cells [area attribute](../table-cell/readme.md#area). Repeating the name of an area causes the content to span those cells. A period signifies an empty cell. The syntax itself provides a visualization of the structure of the grid.
       */
      areasTemplate: string;
      /**
       * Like the `grid-templates-columns` CSS property, this attribute defines the columns of the grid with a space-separated list of values. The values represent the width of column.
       */
      columnsTemplate: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      disabled: boolean;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode: "collapse" | "keep-space";
      /**
       * Like the `grid-templates-rows` CSS property, this attribute defines the rows of the grid with a space-separated list of values. The values represent the height of each row.
       */
      rowsTemplate: string;
    }
  }

  interface HTMLGxTableElement
    extends StencilComponents.GxTable,
      HTMLStencilElement {}

  var HTMLGxTableElement: {
    prototype: HTMLGxTableElement;
    new (): HTMLGxTableElement;
  };
  interface HTMLElementTagNameMap {
    "gx-table": HTMLGxTableElement;
  }
  interface ElementTagNameMap {
    "gx-table": HTMLGxTableElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-table": JSXElements.GxTableAttributes;
    }
  }
  namespace JSXElements {
    export interface GxTableAttributes extends HTMLAttributes {
      /**
       * Like the `grid-templates-areas` CSS property, this attribute defines a grid template by referencing the names of the areas which are specified with the cells [area attribute](../table-cell/readme.md#area). Repeating the name of an area causes the content to span those cells. A period signifies an empty cell. The syntax itself provides a visualization of the structure of the grid.
       */
      areasTemplate?: string;
      /**
       * Like the `grid-templates-columns` CSS property, this attribute defines the columns of the grid with a space-separated list of values. The values represent the width of column.
       */
      columnsTemplate?: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      disabled?: boolean;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode?: "collapse" | "keep-space";
      /**
       * Emitted when the element is clicked.
       */
      onOnClick?: (event: CustomEvent) => void;
      /**
       * Like the `grid-templates-rows` CSS property, this attribute defines the rows of the grid with a space-separated list of values. The values represent the height of each row.
       */
      rowsTemplate?: string;
    }
  }
}

declare global {
  namespace StencilComponents {
    interface GxTextblock {
      /**
       * A CSS class to set as the inner element class.
       */
      cssClass: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      disabled: boolean;
      /**
       * This attribute lets you specify an URL. If a URL is specified, the textblock acts as an anchor.
       */
      href: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode: "collapse" | "keep-space";
    }
  }

  interface HTMLGxTextblockElement
    extends StencilComponents.GxTextblock,
      HTMLStencilElement {}

  var HTMLGxTextblockElement: {
    prototype: HTMLGxTextblockElement;
    new (): HTMLGxTextblockElement;
  };
  interface HTMLElementTagNameMap {
    "gx-textblock": HTMLGxTextblockElement;
  }
  interface ElementTagNameMap {
    "gx-textblock": HTMLGxTextblockElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-textblock": JSXElements.GxTextblockAttributes;
    }
  }
  namespace JSXElements {
    export interface GxTextblockAttributes extends HTMLAttributes {
      /**
       * A CSS class to set as the inner element class.
       */
      cssClass?: string;
      /**
       * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
       */
      disabled?: boolean;
      /**
       * This attribute lets you specify an URL. If a URL is specified, the textblock acts as an anchor.
       */
      href?: string;
      /**
       * This attribute lets you specify how this element will behave when hidden.  | Value        | Details                                                                     | | ------------ | --------------------------------------------------------------------------- | | `keep-space` | The element remains in the document flow, and it does occupy space.         | | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
       */
      invisibleMode?: "collapse" | "keep-space";
      /**
       * Emitted when the element is clicked.
       */
      onOnClick?: (event: CustomEvent) => void;
    }
  }
}

declare global {
  namespace JSX { interface StencilJSX {} }
}

export declare function defineCustomElements(window: any): void;
