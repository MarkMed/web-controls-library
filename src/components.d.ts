/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */
declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {

  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;
  }

  interface HTMLAttributes {}
}

import { Button as GxButton } from "./components/button/button";

declare global {
  interface HTMLGxButtonElement extends GxButton, HTMLStencilElement {}
  var HTMLGxButtonElement: {
    prototype: HTMLGxButtonElement;
    new (): HTMLGxButtonElement;
  };
  interface HTMLElementTagNameMap {
    "gx-button": HTMLGxButtonElement;
  }
  interface ElementTagNameMap {
    "gx-button": HTMLGxButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-button": JSXElements.GxButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface GxButtonAttributes extends HTMLAttributes {
      disabled?: boolean;
      imagePosition?: "above" | "before" | "after" | "below" | "behind";
      invisibleMode?: "collapse" | "keep-space";
      size?: "large" | "normal" | "small";
    }
  }
}

import { Card as GxCard } from "./components/card/card";

declare global {
  interface HTMLGxCardElement extends GxCard, HTMLStencilElement {}
  var HTMLGxCardElement: {
    prototype: HTMLGxCardElement;
    new (): HTMLGxCardElement;
  };
  interface HTMLElementTagNameMap {
    "gx-card": HTMLGxCardElement;
  }
  interface ElementTagNameMap {
    "gx-card": HTMLGxCardElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-card": JSXElements.GxCardAttributes;
    }
  }
  namespace JSXElements {
    export interface GxCardAttributes extends HTMLAttributes {
      invisibleMode?: "collapse" | "keep-space";
    }
  }
}

import { CheckBox as GxCheckbox } from "./components/checkbox/checkbox";

declare global {
  interface HTMLGxCheckboxElement extends GxCheckbox, HTMLStencilElement {}
  var HTMLGxCheckboxElement: {
    prototype: HTMLGxCheckboxElement;
    new (): HTMLGxCheckboxElement;
  };
  interface HTMLElementTagNameMap {
    "gx-checkbox": HTMLGxCheckboxElement;
  }
  interface ElementTagNameMap {
    "gx-checkbox": HTMLGxCheckboxElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-checkbox": JSXElements.GxCheckboxAttributes;
    }
  }
  namespace JSXElements {
    export interface GxCheckboxAttributes extends HTMLAttributes {
      caption?: string;
      checked?: boolean;
      cssClass?: string;
      disabled?: boolean;
      id?: string;
      invisibleMode?: "collapse" | "keep-space";
    }
  }
}

import { Edit as GxEdit } from "./components/edit/edit";

declare global {
  interface HTMLGxEditElement extends GxEdit, HTMLStencilElement {}
  var HTMLGxEditElement: {
    prototype: HTMLGxEditElement;
    new (): HTMLGxEditElement;
  };
  interface HTMLElementTagNameMap {
    "gx-edit": HTMLGxEditElement;
  }
  interface ElementTagNameMap {
    "gx-edit": HTMLGxEditElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-edit": JSXElements.GxEditAttributes;
    }
  }
  namespace JSXElements {
    export interface GxEditAttributes extends HTMLAttributes {
      autocapitalize?: "none" | "sentences" | "words" | "characters";
      autocomplete?: "on" | "off";
      autocorrect?: string;
      cssClass?: string;
      disabled?: boolean;
      id?: string;
      invisibleMode?: "collapse" | "keep-space";
      multiline?: boolean;
      placeholder?: string;
      readonly?: boolean;
      showTrigger?: boolean;
      triggerClass?: string;
      triggerText?: string;
      type?:
        | "date"
        | "datetime-local"
        | "email"
        | "file"
        | "number"
        | "password"
        | "search"
        | "tel"
        | "text"
        | "url";
      value?: string;
    }
  }
}

import { FormField as GxFormField } from "./components/form-field/form-field";

declare global {
  interface HTMLGxFormFieldElement extends GxFormField, HTMLStencilElement {}
  var HTMLGxFormFieldElement: {
    prototype: HTMLGxFormFieldElement;
    new (): HTMLGxFormFieldElement;
  };
  interface HTMLElementTagNameMap {
    "gx-form-field": HTMLGxFormFieldElement;
  }
  interface ElementTagNameMap {
    "gx-form-field": HTMLGxFormFieldElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-form-field": JSXElements.GxFormFieldAttributes;
    }
  }
  namespace JSXElements {
    export interface GxFormFieldAttributes extends HTMLAttributes {
      labelCaption?: string;
      labelClass?: string;
      labelPosition?: "none" | "top" | "right" | "bottom" | "left" | "float";
    }
  }
}

import { Image as GxImage } from "./components/image/image";

declare global {
  interface HTMLGxImageElement extends GxImage, HTMLStencilElement {}
  var HTMLGxImageElement: {
    prototype: HTMLGxImageElement;
    new (): HTMLGxImageElement;
  };
  interface HTMLElementTagNameMap {
    "gx-image": HTMLGxImageElement;
  }
  interface ElementTagNameMap {
    "gx-image": HTMLGxImageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-image": JSXElements.GxImageAttributes;
    }
  }
  namespace JSXElements {
    export interface GxImageAttributes extends HTMLAttributes {
      alt?: string;
      cssClass?: string;
      disabled?: boolean;
      height?: string;
      lowResolutionSrc?: string;
      src?: string;
      title?: string;
      width?: string;
    }
  }
}

import { Message as GxMessage } from "./components/message/message";

declare global {
  interface HTMLGxMessageElement extends GxMessage, HTMLStencilElement {}
  var HTMLGxMessageElement: {
    prototype: HTMLGxMessageElement;
    new (): HTMLGxMessageElement;
  };
  interface HTMLElementTagNameMap {
    "gx-message": HTMLGxMessageElement;
  }
  interface ElementTagNameMap {
    "gx-message": HTMLGxMessageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-message": JSXElements.GxMessageAttributes;
    }
  }
  namespace JSXElements {
    export interface GxMessageAttributes extends HTMLAttributes {
      closeButtonText?: string;
      duration?: number;
      invisibleMode?: "collapse" | "keep-space";
      showCloseButton?: boolean;
      type?: "info" | "warning" | "error";
    }
  }
}

import { PasswordEdit as GxPasswordEdit } from "./components/password-edit/password-edit";

declare global {
  interface HTMLGxPasswordEditElement
    extends GxPasswordEdit,
      HTMLStencilElement {}
  var HTMLGxPasswordEditElement: {
    prototype: HTMLGxPasswordEditElement;
    new (): HTMLGxPasswordEditElement;
  };
  interface HTMLElementTagNameMap {
    "gx-password-edit": HTMLGxPasswordEditElement;
  }
  interface ElementTagNameMap {
    "gx-password-edit": HTMLGxPasswordEditElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-password-edit": JSXElements.GxPasswordEditAttributes;
    }
  }
  namespace JSXElements {
    export interface GxPasswordEditAttributes extends HTMLAttributes {
      cssClass?: string;
      disabled?: boolean;
      id?: string;
      invisibleMode?: "collapse" | "keep-space";
      placeholder?: string;
      readonly?: boolean;
      revealButtonTextOff?: string;
      revealButtonTextOn?: string;
      showRevealButton?: boolean;
      value?: string;
    }
  }
}

import { RadioGroup as GxRadioGroup } from "./components/radio-group/radio-group";

declare global {
  interface HTMLGxRadioGroupElement extends GxRadioGroup, HTMLStencilElement {}
  var HTMLGxRadioGroupElement: {
    prototype: HTMLGxRadioGroupElement;
    new (): HTMLGxRadioGroupElement;
  };
  interface HTMLElementTagNameMap {
    "gx-radio-group": HTMLGxRadioGroupElement;
  }
  interface ElementTagNameMap {
    "gx-radio-group": HTMLGxRadioGroupElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-radio-group": JSXElements.GxRadioGroupAttributes;
    }
  }
  namespace JSXElements {
    export interface GxRadioGroupAttributes extends HTMLAttributes {
      direction?: "horizontal" | "vertical";
      disabled?: boolean;
      id?: string;
      invisibleMode?: "collapse" | "keep-space";
      name?: string;
      value?: string;
    }
  }
}

import { RadioOption as GxRadioOption } from "./components/radio-option/radio-option";

declare global {
  interface HTMLGxRadioOptionElement
    extends GxRadioOption,
      HTMLStencilElement {}
  var HTMLGxRadioOptionElement: {
    prototype: HTMLGxRadioOptionElement;
    new (): HTMLGxRadioOptionElement;
  };
  interface HTMLElementTagNameMap {
    "gx-radio-option": HTMLGxRadioOptionElement;
  }
  interface ElementTagNameMap {
    "gx-radio-option": HTMLGxRadioOptionElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-radio-option": JSXElements.GxRadioOptionAttributes;
    }
  }
  namespace JSXElements {
    export interface GxRadioOptionAttributes extends HTMLAttributes {
      caption?: string;
      checked?: boolean;
      cssClass?: string;
      disabled?: boolean;
      id?: string;
      invisibleMode?: "collapse" | "keep-space";
      name?: string;
      value?: string;
    }
  }
}

import { SelectOption as GxSelectOption } from "./components/select-option/select-option";

declare global {
  interface HTMLGxSelectOptionElement
    extends GxSelectOption,
      HTMLStencilElement {}
  var HTMLGxSelectOptionElement: {
    prototype: HTMLGxSelectOptionElement;
    new (): HTMLGxSelectOptionElement;
  };
  interface HTMLElementTagNameMap {
    "gx-select-option": HTMLGxSelectOptionElement;
  }
  interface ElementTagNameMap {
    "gx-select-option": HTMLGxSelectOptionElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-select-option": JSXElements.GxSelectOptionAttributes;
    }
  }
  namespace JSXElements {
    export interface GxSelectOptionAttributes extends HTMLAttributes {
      cssClass?: string;
      disabled?: boolean;
      selected?: boolean;
      value?: string;
    }
  }
}

import { Select as GxSelect } from "./components/select/select";

declare global {
  interface HTMLGxSelectElement extends GxSelect, HTMLStencilElement {}
  var HTMLGxSelectElement: {
    prototype: HTMLGxSelectElement;
    new (): HTMLGxSelectElement;
  };
  interface HTMLElementTagNameMap {
    "gx-select": HTMLGxSelectElement;
  }
  interface ElementTagNameMap {
    "gx-select": HTMLGxSelectElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-select": JSXElements.GxSelectAttributes;
    }
  }
  namespace JSXElements {
    export interface GxSelectAttributes extends HTMLAttributes {
      cssClass?: string;
      disabled?: boolean;
      id?: string;
      invisibleMode?: "collapse" | "keep-space";
      readonly?: boolean;
      value?: string;
    }
  }
}

import { TableCell as GxTableCell } from "./components/table-cell/table-cell";

declare global {
  interface HTMLGxTableCellElement extends GxTableCell, HTMLStencilElement {}
  var HTMLGxTableCellElement: {
    prototype: HTMLGxTableCellElement;
    new (): HTMLGxTableCellElement;
  };
  interface HTMLElementTagNameMap {
    "gx-table-cell": HTMLGxTableCellElement;
  }
  interface ElementTagNameMap {
    "gx-table-cell": HTMLGxTableCellElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-table-cell": JSXElements.GxTableCellAttributes;
    }
  }
  namespace JSXElements {
    export interface GxTableCellAttributes extends HTMLAttributes {
      align?: "left" | "right" | "center";
      area?: string;
      autoGrow?: boolean;
      valign?: "top" | "bottom" | "medium";
    }
  }
}

import { Table as GxTable } from "./components/table/table";

declare global {
  interface HTMLGxTableElement extends GxTable, HTMLStencilElement {}
  var HTMLGxTableElement: {
    prototype: HTMLGxTableElement;
    new (): HTMLGxTableElement;
  };
  interface HTMLElementTagNameMap {
    "gx-table": HTMLGxTableElement;
  }
  interface ElementTagNameMap {
    "gx-table": HTMLGxTableElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-table": JSXElements.GxTableAttributes;
    }
  }
  namespace JSXElements {
    export interface GxTableAttributes extends HTMLAttributes {
      areasTemplate?: string;
      columnsTemplate?: string;
      disabled?: boolean;
      invisibleMode?: "collapse" | "keep-space";
      rowsTemplate?: string;
    }
  }
}

import { TextBlock as GxTextblock } from "./components/textblock/textblock";

declare global {
  interface HTMLGxTextblockElement extends GxTextblock, HTMLStencilElement {}
  var HTMLGxTextblockElement: {
    prototype: HTMLGxTextblockElement;
    new (): HTMLGxTextblockElement;
  };
  interface HTMLElementTagNameMap {
    "gx-textblock": HTMLGxTextblockElement;
  }
  interface ElementTagNameMap {
    "gx-textblock": HTMLGxTextblockElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gx-textblock": JSXElements.GxTextblockAttributes;
    }
  }
  namespace JSXElements {
    export interface GxTextblockAttributes extends HTMLAttributes {
      cssClass?: string;
      disabled?: boolean;
      href?: string;
      invisibleMode?: "collapse" | "keep-space";
    }
  }
}

declare global {
  namespace JSX { interface StencilJSX {} }
}
